# -*- coding: utf-8 -*-
"""Python projekt - Bike sharing Edinburgh.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BcJK1hJn_6g8WyRBjTN4-03wVNQ98ILG

<Vojta K. #1182>

Python projekt - Bike sharing Edinburgh

Python projekt: Zpracování datových výstupů (tabulek, grafů, map a textových komentářů) z datových podkladů o výpůjčkách sdílených kol/ kolových stanic a počasí v Edinburghu. 

Zdrojová data:
Databáze Engeto - edinburgh_bikes
Databáze Engeto - edinburgh_weather

Zadání projektu – klíčové body k zjištění:
1.	Identifikace aktivních a neaktivních stanic
2.	Identifikace nejfrekventovanějších stanic
3.	Identifikace stanic, na kt. se kola hromadí
4.	Identifikace stanic, na kt. kola potenciálně chybí
5.	Spočítání vzdálenosti mezi jednotlivými stanicemi
6.	Doba jedné výpůjčky ( a. jak dlouho trvá 1 výpůjčka? b. nalezení odlehlých hodnot a zobrazení histogramu)
7.	Zobrazení vývoje poptávky po půjčování kol v čase
8.	Zodpovězení otázky, zda si lidé půjčují kola více o víkendu než během pracovního týdne?
9.	Zjištění vlivu počasí na poptávku po kolech a identifikace příčiny výkyvů poptávky

Výstupy projektu:
Strukturované výstupy zpracované v Google Colaboratory notebooku. Notebook se skládá ze 3 stěžejních částí (1. Importů knihoven a enginu 2. Zobrazení relevantních zdrojových dat 3. Zpracovaných výstupů projektu formou kódu, tabulek, grafů a komentářů), které zodpovídají výše uvedené otázky a body zadání projektu.

# 1. Importy knihoven, engine
"""

!pip install pymysql

import pymysql
import pandas as pd
import numpy as np
import sqlalchemy
import datetime
import matplotlib.pyplot as plt
import seaborn as sbn

from geopy.distance import geodesic
from sqlalchemy import create_engine
from itertools import combinations
from scipy import stats

engine = create_engine("mysql+pymysql://data-student:u9AB6hWGsNkNcRDm@data.engeto.com:3306/data_academy_04_2022")

"""# 2. Zobrazení relevantních dat z Engeto databáze

## 2.1 Stanice kol
"""

query_1 = 'SELECT * FROM edinburgh_bikes ORDER BY started_at'
df_bikes = pd.read_sql(sql=query_1, con=engine)

df_bikes

"""## 2.2 Počasí"""

query_2 = 'SELECT * FROM edinburgh_weather'
df_weather = pd.read_sql(sql=query_2, con=engine)

df_weather

"""## 2.3 Vizualizace - mapa stanic kol"""

query_3 = 'SELECT start_station_latitude AS latitude, start_station_longitude AS longitude FROM edinburgh_bikes'
df_bikes_station_map = pd.read_sql(sql=query_3, con=engine)

df_bikes_station_map

import plotly.graph_objects as go
import plotly.express as px

fig = px.scatter_mapbox(df_bikes_station_map,lat='latitude', lon='longitude', zoom=11, height=500)
fig.update_layout(mapbox_style="open-street-map")
fig.update_layout(margin={"r" :0, "t" :0, "l" :0, "b" :0})
fig.show()

"""## 2.4 Seřazení stanic kol  dle odjezdů: ID, název a geog. souřadnice


"""

bike_start_df = (
    df_bikes[[
        'start_station_id','start_station_name',
        'start_station_latitude',
        'start_station_longitude']]
    .rename(columns = {
        'start_station_name':'station',
        'start_station_id':'station_id',
        'start_station_latitude':'latitude',
        'start_station_longitude':'longitude'})
    .drop_duplicates(subset = 'station_id'))

bike_start_df

"""## 2.5 Seřazení stanic kol  dle cílových stanic: ID, název a geog. souřadnice"""

bike_end_df = (
    df_bikes[[
        'end_station_id','end_station_name',
        'end_station_latitude',
        'end_station_longitude']]
    .rename(columns = {
        'end_station_name':'station',
        'end_station_id':'station_id',
        'end_station_latitude':'latitude',
        'end_station_longitude':'longitude'})
    .drop_duplicates(subset = 'station_id'))

bike_end_df

"""## 2.6 Celkové zobrazení stanic kol"""

bikestation_list_df = (
    bike_end_df
    .merge(bike_start_df, how = 'outer')
    .drop_duplicates(subset = 'station_id')
    .sort_values('station_id', ascending = True)
    .set_index('station_id'))
bikestation_list_df['key'] = 1

bikestation_list_df

"""# 3. Výstupy projektu a odpovědi

## 1. - 4. Podklady pro identifikaci vytíženosti stanic kol (aktivní/neaktivní/frekventovanost/hromadění/nedostatek kol)

Suma kol dle odjezdů z jednotlivých stanic
"""

sum_start_bikestation_df = (
    df_bikes[['start_station_id','start_station_name']]
    .assign(departure_count = 1)
    .groupby('start_station_id')
    .sum()
    .sort_values(['departure_count'],ascending=True)
    .reset_index())
sum_start_bikestation_df = (
    sum_start_bikestation_df
    .rename(columns = {'start_station_id':'id_station'})
    .set_index('id_station'))
sum_start_bikestation_df = (
    sum_start_bikestation_df
    .join(bikestation_list_df)
    .drop(['longitude','latitude', 'key'], axis = 1))

sum_start_bikestation_df

"""Suma kol dle příjezdů do jednotlivých stanic"""

sum_end_bikestation_df = (
    df_bikes[['end_station_id', 'end_station_name']]
    .assign(arrival_count = 1)
    .groupby('end_station_id')
    .sum()
    .sort_values(['arrival_count'],ascending = True)
    .reset_index())
sum_end_bikestation_df = (
    sum_end_bikestation_df
    .rename(columns = {'end_station_id':'id_station'})
    .set_index('id_station'))
sum_end_bikestation_df = (
    sum_end_bikestation_df
    .join(bikestation_list_df)
    .drop(['longitude','latitude', 'key'], axis=1))

sum_end_bikestation_df

"""Souhrn vytíženosti stanic"""

busyness_bikestation_df = (
    sum_start_bikestation_df
    .drop(columns='station')
    .join(sum_end_bikestation_df, how = 'outer'))
busyness_bikestation_df[['arrival_count','departure_count']].fillna(0)
busyness_bikestation_df['sum_arrival_and_departure'] = (
    busyness_bikestation_df['arrival_count']
    +busyness_bikestation_df['departure_count'])
busyness_bikestation_df['bikes_cumulation'] = (
    busyness_bikestation_df['arrival_count']
    -busyness_bikestation_df['departure_count'])
busyness_bikestation_df['bikes_lack'] = (
    busyness_bikestation_df['departure_count']
    -busyness_bikestation_df['arrival_count'])

busyness_bikestation_df

"""## 10 nejméně vytížených stanic kol"""

busyness_bikestation_df = (
    busyness_bikestation_df
    .sort_values('sum_arrival_and_departure', ascending=True))
fig, ax = plt.subplots()
ax.bar(busyness_bikestation_df['station'].head(10),
       busyness_bikestation_df['sum_arrival_and_departure'].head(10),
       edgecolor = 'blue', alpha = 0.5)
ax.set_title('Bottom 10 bike stations of busyness')
ax.set_ylabel('Sum of returned-rented bikes')
plt.xticks(rotation = 25, ha = 'right')
plt.show()

"""## 10 nejvíce vytížených stanic kol"""

busyness_bikestation_df = (
    busyness_bikestation_df
    .sort_values('sum_arrival_and_departure', ascending=False))
fig, ax = plt.subplots()
ax.bar(busyness_bikestation_df['station'].head(10),
       busyness_bikestation_df['sum_arrival_and_departure'].head(10),
       edgecolor = 'blue', alpha = 0.5)
ax.set_title('Top 10 bike stations of busyness')
ax.set_ylabel('Sum of returned/rented bikes')
plt.xticks(rotation = 25, ha = 'right')
plt.show()

"""## Identifikace stanic, na kt. se kola hromadí: top 10


"""

busyness_bikestation_df=(
    busyness_bikestation_df
    .sort_values('bikes_cumulation', ascending = False))
fig, ax = plt.subplots()
ax.bar(busyness_bikestation_df['station'].head(10), 
       busyness_bikestation_df['bikes_cumulation'].head(10), 
       edgecolor = 'blue', alpha = 0.5)
ax.set_title('Top 10 bike stations of redundant bikes')
ax.set_ylabel('Redundant bikes')
plt.xticks(rotation = 25, ha = 'right')
plt.show()

"""## Identifikace stanic, na kt. kola potenciálně chybí: top 10

"""

busyness_bikestation_df = (
    busyness_bikestation_df
    .sort_values('bikes_lack', ascending=False))
fig, ax = plt.subplots()
ax.bar(busyness_bikestation_df['station'].head(10), 
       busyness_bikestation_df['bikes_lack'].head(10), 
       edgecolor = 'blue', alpha = 0.5)
ax.set_title('Top 10 bike stations with lack of bikes')
ax.set_ylabel('Count of lacked bikes')
plt.xticks(rotation = 25, ha = 'right')
plt.show()

"""## 5. Spočítání vzdálenosti mezi jednotlivými stanicemi

"""

@np.vectorize
def geodesic_vec(lat1, lon1, lat2, lon2):
    rs = geodesic((lat1, lon1), (lat2, lon2)).kilometers
    return rs

bikestation_list_distance_df = (
    bikestation_list_df
    .reset_index()
    .drop(columns = ['station_id','key'])
    .set_index('station'))
coords = np.array(list(combinations(bikestation_list_distance_df[['latitude', 'longitude']].values, 2)))
coords = coords.reshape(coords.shape[0], 4)
distances = np.round(geodesic_vec(coords[:, 0], coords[:, 1], coords[:, 2], coords[:, 3]), 3)
combos = list(combinations(bikestation_list_distance_df.index, 2))
combos = pd.DataFrame(combos)
dist_df = pd.DataFrame(distances, index=pd.MultiIndex.from_frame(combos, names = ['bikestation_A', 'bikestation_B']), columns = ['distance km'])
dist_df

"""## 6. Doba jedné výpůjčky ( A jak dlouho trvá 1 výpůjčka? B nalezení odlehlých hodnot a C zobrazení histogramu)

##6A) Doba 1 výpůjčky v min.:
"""

round(df_bikes['duration'].mean()/60, 2)

"""## 6B) Nalezení odlehlých hodnot"""

side_values = (
    df_bikes['duration']
    [(np.abs(stats.zscore(df_bikes['duration']))> 3)])
side_values.count()

"""## 6C) Zobrazení histogramu výpůjček kol v min. Výpůjčky nad 2 hod. (120 min.) zahrnuty v posledním sloupci"""

bikerent_times_df = (
    (df_bikes['duration']/60)
    .clip(upper=120)
    [(np.abs(stats.zscore(df_bikes['duration'])) < 3)])
fig, ax = plt.subplots()
time_range = np.arange(0,140,10)
ax.hist(bikerent_times_df,time_range, rwidth = 0.75, edgecolor = 'blue')
ax.set_title('Histogram: Duration of bike rent')
ax.set_xlabel('Duration of rent (min.)')
ax.set_ylabel('Count of rent')
plt.show()

"""## 7. Zobrazení vývoje poptávky po půjčování kol v čase

"""

df_bikes['started_at'] = (
    pd.to_datetime(df_bikes['started_at'])
    .dt.date)
bikerent_cross_time_df = (
    df_bikes.
    assign(cnt = 1)
    .groupby('started_at')
    .sum()
    ['cnt'])
fig, ax = plt.subplots()
plt.plot(bikerent_cross_time_df, color = 'blue')
plt.xticks(rotation = 25, ha = 'right')
plt.title('Rent bike during time')
plt.ylabel('Count of rent bikes')
plt.xlabel('Date')
ax.grid()
plt.margins(0.01)

"""## 8. Zodpovězení otázky zda si lidé půjčují kola více o víkendu než během pracovního týdne?

"""

day_of_week_df = (df_bikes[['started_at']])
day_of_week_df = pd.to_datetime(day_of_week_df['started_at'])
day_of_week_df = day_of_week_df.dt.day_name()
day_of_week_df = pd.DataFrame(day_of_week_df)
distribution_days_df = [
    'Monday', 
    'Tuesday', 
    'Wednesday', 
    'Thursday', 
    'Friday', 
    'Saturday', 
    'Sunday']
day_of_week_df = (
    day_of_week_df.
    assign(cnt=1)
    .groupby(['started_at'])
    .sum()
    .reindex(distribution_days_df))
fig, ax = plt.subplots()
ax.bar(distribution_days_df,day_of_week_df['cnt'], edgecolor = 'blue')
ax.set_ylabel('Count of rent bikes')
ax.set_title('Rent bike during days of week')
plt.xticks(rotation = 25, ha = 'right')
plt.show();

"""Nejvíce si sdílená kola lidé půjčují o víkendech.

## 9. Jaký má vliv počasí na poptávku po kolech a identifikace příčiny výkyvů poptávky

## 9A) Počasí v Edinburghu: Zobrazení všech hodnot, zobrazení průměrných teplot, povětrnostních podmínek a dešťových srážek (převedení na čísla bez jednotek a zprůměrování)
"""

query_5 = 'SELECT * FROM edinburgh_weather'
df_weather = pd.read_sql(sql=query_5, con=engine)

df_weather

df_weather['temp'] = (
    df_weather ['temp']
    .replace(' °c','', regex = True).astype(float))
df_weather['gust'] = (
    df_weather['gust']
    .replace(' km/h','', regex=True).astype(float))
df_weather['rain'] = (
    df_weather['rain']
    .replace(' mm', '', regex = True).astype(float))
weather_pure_data_df = [
    df_weather['date'],
    df_weather['time'],
    df_weather['temp'],
    df_weather['gust'],
    df_weather['rain']]
headers = ['date','time','temp', 'gust', 'rain']
weather_avg_data_df = pd.concat(weather_pure_data_df, axis = 1, keys = headers)
weather_avg_data_df = (
    weather_avg_data_df
    .drop(weather_avg_data_df[weather_avg_data_df['time'] == '00:00'].index))
weather_avg_data_df = (
    weather_avg_data_df
    .drop(weather_avg_data_df[weather_avg_data_df['time'] == '03:00'].index))
weather_avg_data_df = (
    weather_avg_data_df
    .set_index('date')
    .drop('time', axis=1)
    .groupby('date')
    .mean())
weather_avg_data_df = (weather_avg_data_df.reset_index())
weather_avg_data_df['date'] = pd.to_datetime(weather_avg_data_df['date'])
weather_avg_data_df = weather_avg_data_df.set_index('date')

weather_avg_data_df

"""## 9B) Spojení dat o výpůjčkách kol a počasí v Edinburghu s vyobrazením vztahů mezi počty výpůjček, teplotou, povětrnostními podmínkami a dešťovými srážkami (korelace dat spojených tabulek)"""

bikerent_cross_time_df = pd.DataFrame(bikerent_cross_time_df.rename_axis("date"))
bikerent_cross_time_and_weather_avg_data_df = (
    bikerent_cross_time_df
    .join(weather_avg_data_df,how = 'inner'))
corr_matrix = (
    bikerent_cross_time_and_weather_avg_data_df
    .corr(method = 'pearson')
    .drop(['gust', 'rain','temp']))
corr_matrix

bikerent_cross_time_and_weather_avg_data_df

bikerent_cross_time_and_weather_avg_data_df['temp_scope'] = (
    bikerent_cross_time_and_weather_avg_data_df['temp']
    .apply(lambda x : 
           '0-7' if x < 7 
           else '7-14' if (x >= 7 and x < 14) 
           else '14-20' if (x >= 14 and x < 20) 
           else '20+'))
bikerent_cross_time_and_weather_avg_data_df['gust_scope'] = (
    bikerent_cross_time_and_weather_avg_data_df['gust'].
    apply(lambda x : 
          '0-10' if x < 10 
          else '10-20' if (x > 10 and x <= 20) 
          else '20-30' if (x > 20 and x <= 30) 
          else '30-40' if (x > 30 and x <= 40)
          else '40-50' if (x > 40 and x <= 50) 
          else '50+'))
bikerent_cross_time_and_weather_avg_data_df['rain_scope'] = (
    bikerent_cross_time_and_weather_avg_data_df['rain']
    .apply(lambda x: 
           '0-1' if x < 1  
           else '1-2' if (x > 1 and x <= 2) 
           else '2-3' if (x > 2 and x <= 3)
           else '3-4' if (x > 3 and x <= 4) 
           else '4+'))

"""## 9C) Výpůjčky kol dle průměrné denní teploty"""

temp_bikerent = (
    bikerent_cross_time_and_weather_avg_data_df
    .groupby('temp_scope')
    .sum()
    ['cnt'])
temp_scope = ['0-7','7-14','14-20','20+']
temp_bikerent = (
    pd.DataFrame(temp_bikerent.reindex(temp_scope)))
fig, ax = plt.subplots()
ax.bar(temp_scope, temp_bikerent['cnt'], edgecolor = 'blue')
ax.set_ylabel('Count of rent bike')
ax.set_xlabel('Temperature scope (°C)')
ax.set_title('Rent bike by temperature')
plt.xticks(rotation = 25, ha = 'right')
plt.show();

"""## 9D) Výpůjčky kol dle průměrných denních povětrnostních podmínek"""

gust_bikerent = (
    bikerent_cross_time_and_weather_avg_data_df
    .groupby('gust_scope')
    .sum()
    ['cnt'])
gust_scope = ['0-10','10-20','20-30', '30-40', '40-50', '50+']
gust_bikerent = (
    pd.DataFrame(gust_bikerent.reindex(gust_scope)))
fig, ax = plt.subplots()
ax.bar(gust_scope, gust_bikerent['cnt'], edgecolor = 'blue')
ax.set_ylabel('Count of rent bike')
ax.set_xlabel('Gust scope (km/h)')
ax.set_title('Rent bike by gust')
plt.xticks(rotation = 25, ha = 'right')
plt.show();

"""## 9E) Výpůjčky kol dle průměrné denních dešťových srážek"""

rain_bikerent = (
    bikerent_cross_time_and_weather_avg_data_df
    .groupby('rain_scope')
    .sum()
    ['cnt'])
rain_scope = ['0-1','1-2','2-3','3-4', '4+']
rain_bikerent = (
    pd.DataFrame(rain_bikerent.reindex(rain_scope)))
fig, ax = plt.subplots()
ax.bar(rain_scope, rain_bikerent['cnt'], edgecolor = 'blue')
ax.set_ylabel('Count of rent bike')
ax.set_xlabel('Rain scope (mm)')
ax.set_title('Rent bike by rain')
plt.xticks(rotation = 25, ha = 'right')
plt.show();

"""## 9. Odpověď: Na základě dostupných dat je možno vypozorovat trend ve vypůjčkách kol související s dobrým počasím. Obecně lze říci, že popularita v půjčování sdílených kol roste s dobrým počasím (nejvíce kol se půjčuje při žádných/minimálních deštových srážkách, za mírných povětrnostních podmínek a v mírné teplotě okolo 7 - 20°C)."""